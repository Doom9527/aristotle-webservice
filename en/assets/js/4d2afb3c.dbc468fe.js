"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[878],{7734:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>t,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"caching","title":"Caching","description":"[//]: # (Copyright 2024 Paion Data)","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/caching.mdx","sourceDirName":".","slug":"/caching","permalink":"/aristotle-webservice/en/docs/caching","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/caching.mdx","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"sidebar_position":6,"title":"Caching"},"sidebar":"tutorialSidebar","previous":{"title":"Filtering","permalink":"/aristotle-webservice/en/docs/filtering"}}');var a=i(4848),r=i(8453);const c=i.p+"assets/images/redis-caching-b9d47541202dc4c7ccbd1ee60468a4b9.png",t={sidebar_position:6,title:"Caching"},o=void 0,l={},d=[{value:"Handling Long-Running Queries",id:"handling-long-running-queries",level:2},{value:"Enabling LRU Cache",id:"enabling-lru-cache",level:3},{value:"Configuring LRU Cache",id:"configuring-lru-cache",level:3},{value:"Timed-Out Queries",id:"timed-out-queries",level:2}];function h(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.p,{children:["Aristotle is designed to be serving over hundreds of millions of nodes and links. One challenge for supporting the\nCRUD of the data in such a scale is the efficient ",(0,a.jsx)(n.em,{children:"expand"})," operation common in knowledge graph, because such operation\nover sufficiently large dataset often results in"]}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"Long-running query"}),"\n",(0,a.jsx)(n.li,{children:"Timed-out query (due to out-of-memory error)"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"This section discusses how Aristotle handles the two cases above."}),"\n",(0,a.jsx)(n.h2,{id:"handling-long-running-queries",children:"Handling Long-Running Queries"}),"\n",(0,a.jsxs)(n.p,{children:["Under a high load when data is massive, even small subgraph expansion could post high pressure on the database,\nresulting slower queries for such cases. Aristotle offers LRU cache mechanism that offers the optimal query time for\nmost frequently queries subgraph. Although we are aware that great tools such as\n",(0,a.jsx)(n.a,{href:"https://github.com/google/guava",children:"Guava"})," or ",(0,a.jsx)(n.a,{href:"https://github.com/ben-manes/caffeine",children:"Caffeine"})," cache are there for us,\nsince Aristotle is Spring-based, for this type of caching we use\n",(0,a.jsx)(n.a,{href:"https://docs.spring.io/spring-boot/reference/io/caching.html",children:"Spring Cache"})," as the transparent caching mechanism on all\nread operations."]}),"\n",(0,a.jsx)(n.h3,{id:"enabling-lru-cache",children:"Enabling LRU Cache"}),"\n",(0,a.jsxs)(n.p,{children:["The cache is enabled by default. To disable it, simply set ",(0,a.jsx)(n.code,{children:"read-cache.enabled"})," ",(0,a.jsx)(n.a,{href:"./configuration",children:"configuration"})," to\n",(0,a.jsx)(n.code,{children:"false"}),". Here is the example for disabling the cache in\n",(0,a.jsx)(n.a,{href:"https://github.com/paion-data/aristotle/blob/master/src/main/resources/application.yaml",children:"application.yaml"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"read-cache:\n  enabled: false\n"})}),"\n",(0,a.jsx)(n.h3,{id:"configuring-lru-cache",children:"Configuring LRU Cache"}),"\n",(0,a.jsxs)(n.p,{children:["Cache size can be adjusted in terms of memory allocation or number of items cached. To bound the cache based on memory\nsize, use ",(0,a.jsx)(n.code,{children:"read-cache.size"})," ",(0,a.jsx)(n.a,{href:"./configuration",children:"configuration"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"read-cache:\n  enabled: true\n  size: 500MB\n"})}),"\n",(0,a.jsxs)(n.admonition,{title:"Size Unit",type:"info",children:[(0,a.jsx)(n.p,{children:"The acceptable memory size units are:"}),(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"KB"}),"\n",(0,a.jsx)(n.li,{children:"MB"}),"\n",(0,a.jsx)(n.li,{children:"GB"}),"\n"]}),(0,a.jsx)(n.p,{children:"Specifying all others will result in a configuration error"})]}),"\n",(0,a.jsxs)(n.p,{children:["To restrict the number of cache entries instead, use ",(0,a.jsx)(n.code,{children:"read-cache.num-subgraphs"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"read-cache:\n  enabled: true\n  num-subgraphs: 5000\n"})}),"\n",(0,a.jsx)(n.admonition,{type:"warning",children:(0,a.jsxs)(n.p,{children:["Specifying both ",(0,a.jsx)(n.code,{children:"read-cache.size"})," and ",(0,a.jsx)(n.code,{children:"read-cache.num-subgraphs"})," is a configuration error and fails the Aristotle\nstartup"]})}),"\n",(0,a.jsx)(n.h2,{id:"timed-out-queries",children:"Timed-Out Queries"}),"\n",(0,a.jsxs)(n.p,{children:["For the second type of issue, we pre-compute expand subgraph in a separate microservice, called\n",(0,a.jsx)(n.a,{href:"https://github.com/paion-data/mega-mover/",children:"mega-mover"})," and load the subgraph as the cache into Redis."]}),"\n",(0,a.jsx)(n.admonition,{type:"tip",children:(0,a.jsx)(n.p,{children:"Mega Mover is still under development and its documentation will be available once done."})}),"\n","\n",(0,a.jsx)("div",{align:"center",children:(0,a.jsx)("img",{src:c,width:"80%"})})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>c,x:()=>t});var s=i(6540);const a={},r=s.createContext(a);function c(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:c(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);